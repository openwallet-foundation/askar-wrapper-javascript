name: "Askar Wrapper Javascript"

permissions:
  actions: write
  contents: write

on:
  push:
    branches: [v0.2.4]
  pull_request:
    branches: [main]
  workflow_dispatch:
      inputs:
          release-type:
              description: 'Type of release (major, minor, patch, alpha)'
              required: true
              default: patch
              type: choice
              options:
                  - major
                  - minor
                  - patch
                  - alpha

jobs:
  continous-integration:
    name: Continous Integration
    
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.JS 18.x
        uses: actions/setup-node@v4
        with:
          node-version: 18.x

      - uses: pnpm/action-setup@v4

      - name: Install dependencies
        run: pnpm install

      - name: Lint
        run: pnpm style:check 

      - name: Build library
        run: pnpm build

      - name: Check types
        run: pnpm types:check

      - name: Run tests
        run: pnpm test

  continous-deployment:
    runs-on: ubuntu-latest
      
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.JS 18.x
        uses: actions/setup-node@v4
        with:
          node-version: 18.x

      - uses: pnpm/action-setup@v4

      - name: Install dependencies
        run: pnpm install

      - name: Build library
        run: pnpm build

      - name: Set the NPM config
        env:
            NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npm config set //registry.npmjs.org/:_authToken $NPM_TOKEN

      - name: Publish
        id: publish
        env:
            GH_TOKEN: ${{ secrets.GH_TOKEN }}
            NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
            echo ${{ inputs.release-type }}
            git config --global user.name "Openwallet Foundation"

            if [ ${{ inputs.release-type }} == 'alpha' ]; then
              pnpm release --pre-dist-tag alpha prerelease --yes
            else
              pnpm release patch --force-publish --no-private --yes
            fi

            version=$(node -p "require('./lerna.json').version")
            echo "LERNA_VERSION=$version" >> "$GITHUB_OUTPUT"

      - name: Create Github Release
        uses: softprops/action-gh-release@v1
        with:
            generate_release_notes: true
            prerelease: ${{ inputs.release-type == 'alpha' }}
            token: ${{ secrets.GH_TOKEN }}
            tag_name: v${{ steps.publish.outputs.LERNA_VERSION }}
            name: Release v${{ steps.publish.outputs.LERNA_VERSION }}
